# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# React snippets

snippet rfc "react functional component" b
import React from 'react'

function ${1}(${2}){
	return(
		<div>
			${3:<p>Body</p>}
		</div>
		)
}

export default ${1}
endsnippet

snippet rafc "react arrow functional component" b
import React from 'react'

const ${1} = (${2}) => {
	return(
		<div>
			${3:<p>Body</p>}
		</div>
		)
}

export default ${1}
endsnippet

# React Hooks
snippet useS "useState Hook" b
const [${1}, set${2}] = useState(${3})
endsnippet

snippet useE "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}, [${2}])
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet

snippet useRe "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

# open and close jsx tags

snippet sct "Self Closing tag"
<$1 />
endsnippet

snippet oct "Open Close tag"
<$1>
  $2
</$1>
endsnippet
